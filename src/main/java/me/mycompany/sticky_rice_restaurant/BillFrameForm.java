/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package me.mycompany.sticky_rice_restaurant;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author WINDOWS
 */
public class BillFrameForm extends javax.swing.JFrame {

    /**
     * Creates new form BillFrameForm
     */
    public BillFrameForm() {
        initComponents();
        setLocationRelativeTo(null);
        fillComboBox();
        loadTableID(cboIdTable);

    }

    private void clearForm() {
        txtMaMon.setText("");
//        txtMaBan.setText("");
        txtSoluong.setText("");
        txtGiaMon.setText("");
    }

    private void fillComboBox() {
        try {
            Connection connection = DatabaseUtil.getConnection();
            String query = "SELECT TenMon, MaMon, GiaTien FROM THUCDON";
            PreparedStatement statement = connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String foodName = resultSet.getString("TenMon");
                cboTenMon.addItem(foodName);
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error adding dishes to table or database.");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cboTenMon = new javax.swing.JComboBox<>();
        txtMaMon = new javax.swing.JTextField();
        txtGiaMon = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtSoluong = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTableBill = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnAddfood = new javax.swing.JButton();
        btnDeletefood = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        cboIdTable = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Food Name:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("ID Food:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 153));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Price:");

        cboTenMon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        cboTenMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTenMonActionPerformed(evt);
            }
        });

        txtMaMon.setEditable(false);

        txtGiaMon.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("ID Table:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 153));
        jLabel10.setText("Quantity:");

        tblTableBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Table", "Food Name", "ID Food", "Price", "Quantity", "Total"
            }
        ));
        jScrollPane1.setViewportView(tblTableBill);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        btnReset.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReset.setForeground(new java.awt.Color(0, 51, 153));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Refresh1.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnAddfood.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAddfood.setForeground(new java.awt.Color(0, 51, 153));
        btnAddfood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Add New1.png"))); // NOI18N
        btnAddfood.setText("Add food");
        btnAddfood.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddfood.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddfood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddfoodActionPerformed(evt);
            }
        });

        btnDeletefood.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDeletefood.setForeground(new java.awt.Color(0, 51, 153));
        btnDeletefood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Close1.png"))); // NOI18N
        btnDeletefood.setText("Delete food");
        btnDeletefood.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeletefood.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeletefood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletefoodActionPerformed(evt);
            }
        });

        btnHome.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnHome.setForeground(new java.awt.Color(0, 51, 153));
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Home2.png"))); // NOI18N
        btnHome.setText("Home");
        btnHome.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHome.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddfood, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeletefood))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHome)
                    .addComponent(btnReset))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddfood)
                    .addComponent(btnDeletefood))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        cboIdTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"B001","B002","B003","B004","B005","B006","B007","B008","B009","B010" }));
        cboIdTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboIdTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 94, Short.MAX_VALUE)
                                        .addComponent(txtSoluong, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel5))
                                        .addGap(20, 20, 20))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel1))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(txtGiaMon))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtMaMon, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cboIdTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cboTenMon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cboIdTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cboTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtMaMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGiaMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSoluong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        MainForm billForm = new MainForm();
        billForm.setVisible(true);

        // Đóng JFrame "LoginUser" nếu bạn muốn
        dispose();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void cboTenMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTenMonActionPerformed
        // Lấy món ăn được chọn từ comboBox
        cboTenMon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    // Lấy tên món ăn được chọn từ comboBox
                    String selectedFoodName = (String) cboTenMon.getSelectedItem();

                    // Kết nối cơ sở dữ liệu và truy vấn để lấy thông tin id và giá tiền của món ăn được chọn
                    Connection connection = DatabaseUtil.getConnection();
                    String query = "SELECT MaMon, GiaTien FROM THUCDON WHERE TenMon = ?";
                    PreparedStatement statement = connection.prepareStatement(query);
                    statement.setString(1, selectedFoodName);
                    ResultSet resultSet = statement.executeQuery();

                    // Hiển thị thông tin vào các textField tương ứng
                    if (resultSet.next()) {
                        String selectedFoodId = resultSet.getString("MaMon");
                        double selectedFoodPrice = resultSet.getDouble("GiaTien");

                        txtMaMon.setText(selectedFoodId);
                        txtGiaMon.setText(String.valueOf(selectedFoodPrice));
                    } else {
                        // Nếu không tìm thấy món ăn, xóa nội dung trong textField
                        txtMaMon.setText("");
                        txtGiaMon.setText("");
                    }

                    resultSet.close();
                    statement.close();
                    connection.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error adding dishes to table or database.");
                }
            }
        });

    }//GEN-LAST:event_cboTenMonActionPerformed

    private void loadTableID(JComboBox<String> cboIdTable){
           try {
          
        // Kết nối với cơ sở dữ liệu SQL
        Connection connection = me.mycompany.sticky_rice_restaurant.DatabaseUtil.getConnection();
        
        // Truy vấn SQL để lấy tất cả các MaBan từ bảng BAN
        String query = "SELECT MaBan FROM BAN";
        PreparedStatement statement = connection.prepareStatement(query);
        ResultSet resultSet = statement.executeQuery();
        
        // Xóa các mục cũ trong cboIdTable trước khi thêm mới
        cboIdTable.removeAllItems();
        
        // Thêm MaBan từ kết quả truy vấn vào cboIdTable
        while (resultSet.next()) {
            String maBan = resultSet.getString("MaBan");
            cboIdTable.addItem(maBan);
        }
    } catch (SQLException ex) {
        // Xử lý lỗi SQL
        ex.printStackTrace();
    }
    }
  
    private void cboIdTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboIdTableActionPerformed
       

    }//GEN-LAST:event_cboIdTableActionPerformed

    private void btnAddfoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddfoodActionPerformed
        // TODO add your handling code here:
        try {
            // Lấy thông tin từ các trường đã chọn
            String SelectedIDTable = cboIdTable.getSelectedItem().toString();
            String selectedFoodId = txtMaMon.getText(); // Mã món ăn được hiển thị ở textField txtIdFood
            String selectedFoodName = cboTenMon.getSelectedItem().toString(); // Tên món ăn được chọn từ comboBox cboFoodName
            double selectedFoodPrice = Double.parseDouble(txtGiaMon.getText()); // Giá tiền của món ăn được hiển thị ở textField txtPrice
            int quantity = Integer.parseInt(txtSoluong.getText()); // Số lượng nhập vào từ textField txtQuantity

            // Tính tổng tiền
            double totalPrice = quantity * selectedFoodPrice;

            // Hiển thị thông tin món ăn vào bảng
            DefaultTableModel model = (DefaultTableModel) tblTableBill.getModel();
            model.addRow(new Object[]{SelectedIDTable, selectedFoodName, selectedFoodId, selectedFoodPrice, quantity, totalPrice});

            // Lấy MaMon từ bảng THUCDON dựa trên Tên món ăn
            // Lưu thông tin vào cơ sở dữ liệu
            Connection connection = DatabaseUtil.getConnection();

            // Kiểm tra xem cặp giá trị (MaBan, MaMon) đã tồn tại trong bảng BAN_THUCDON chưa
            String checkQuery = "SELECT COUNT(*) FROM BAN_THUCDON WHERE MaBan = ? AND MaMon = ?";
            PreparedStatement checkStatement = connection.prepareStatement(checkQuery);
            checkStatement.setString(1, SelectedIDTable);
            checkStatement.setString(2, selectedFoodId);
            ResultSet resultSet = checkStatement.executeQuery();
            resultSet.next();
            int count = resultSet.getInt(1);

            if (count > 0) {
                String updateQuery = "UPDATE BAN_THUCDON SET SoLuong = SoLuong + ? WHERE MaBan = ? AND MaMon = ?";
                PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
                updateStatement.setInt(1, quantity);
                updateStatement.setString(2, SelectedIDTable);
                updateStatement.setString(3, selectedFoodId);
                updateStatement.executeUpdate();
                updateStatement.close();
                JOptionPane.showMessageDialog(null, "Dish has been added");
            } else {
                // Cặp giá trị (MaBan, MaMon) chưa tồn tại, thêm mới vào bảng BAN_THUCDON
                String insertQuery = "INSERT INTO BAN_THUCDON (MaBan, MaMon, SoLuong) VALUES (?, ?, ?)";
                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
                insertStatement.setString(1, SelectedIDTable);
                insertStatement.setString(2, selectedFoodId);
                insertStatement.setInt(3, quantity);
                insertStatement.executeUpdate();
                insertStatement.close();

                // Hiển thị thông báo khi thêm dữ liệu thành công
                JOptionPane.showMessageDialog(null, "Item added successfully!");
            }

            // Đóng kết nối và các tài nguyên
            resultSet.close();
            checkStatement.close();
            connection.close();
        } catch (NumberFormatException | SQLException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error adding dishes to table or database.");
        }
    }//GEN-LAST:event_btnAddfoodActionPerformed

    private void btnDeletefoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletefoodActionPerformed
        // TODO add your handling code here:
        // Lấy chỉ mục của hàng được chọn trong bảng
        int selectedRow = tblTableBill.getSelectedRow();

        if (selectedRow == -1) {
            // Nếu không có hàng nào được chọn, hiển thị thông báo và thoát
            JOptionPane.showMessageDialog(null, "Please select a dish to delete!");
            return;
        }

        // Lấy MaBan và MaMon từ hàng được chọn
        String selectedTableId = tblTableBill.getValueAt(selectedRow, 0).toString();
        String selectedFoodId = tblTableBill.getValueAt(selectedRow, 2).toString();

        try {
            // Xóa món ăn khỏi bảng và cơ sở dữ liệu
            Connection connection = DatabaseUtil.getConnection();
            String deleteQuery = "DELETE FROM BAN_THUCDON WHERE MaBan = ? AND MaMon = ?";
            PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            deleteStatement.setString(1, selectedTableId);
            deleteStatement.setString(2, selectedFoodId);
            deleteStatement.executeUpdate();
            deleteStatement.close();
            connection.close();

            // Xóa hàng đã chọn khỏi bảng
            DefaultTableModel model = (DefaultTableModel) tblTableBill.getModel();
            model.removeRow(selectedRow);

            // Hiển thị thông báo khi xóa thành công
            JOptionPane.showMessageDialog(null, "Deleted successfully!");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error removing dish from table!");
        }
    }//GEN-LAST:event_btnDeletefoodActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tblTableBill.getModel();
    model.setRowCount(0);
    
    // Đặt lại giá trị của các textfield và combobox về giá trị mặc định
    cboIdTable.setSelectedItem(0);
    cboTenMon.setSelectedItem(0);
    txtMaMon.setText("");
    txtGiaMon.setText("");
    txtSoluong.setText("");
     // Đặt lại combobox về giá trị đầu tiên
    
    // Hiển thị thông báo reset thành công
    JOptionPane.showMessageDialog(null, "Data reset successfully.");
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillFrameForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddfood;
    private javax.swing.JButton btnDeletefood;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cboIdTable;
    private javax.swing.JComboBox<String> cboTenMon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTableBill;
    private javax.swing.JTextField txtGiaMon;
    private javax.swing.JTextField txtMaMon;
    private javax.swing.JTextField txtSoluong;
    // End of variables declaration//GEN-END:variables
}
